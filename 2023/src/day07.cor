let cards = '23456789TJQKA'
let joker = cards . index_of 'J'
let ace = cards . index_of 'A'

let inp = read_text './inputs/day07.txt'
    . split '\n'
    . map(fn(line) {
        let hand, bid = line . split ' '
        (hand . map(fn(c) -> index_of c cards), int bid)
    })

// Returns the 'level' of each hand, where higher > lower
fn level(hand) {
    let counts = dict() . default 0
    for c in hand {
        counts[c] += 1
    }
    counts = counts . values . sort

    if counts == [5] then 6  // 5-of-a-kind
        else if counts == [1, 4] then 5 // 4-of-a-kind
        else if counts == [2, 3] then 4 // full house
        else if counts == [1, 1, 3] then 3 // 3-of-a-kind
        else if counts == [1, 2, 2] then 2 // 2-pair
        else if counts == [1, 1, 1, 2] then 1 // pair
        else 0 // high card
}

fn score(hands) -> hands
    . sort
    . enumerate
    . map(fn((rank, (_, _, bid))) -> (rank + 1) * bid)
    . sum

print('Part 1:', inp . map(fn((hand, bid)) -> (level hand, hand, bid)) . score)
print('Part 2:', inp . map(fn((hand, bid)) {
    // Adjust hands for jokers
    // 1. map any 'J' 9 -> -1 for rank based ordering, but determine the best possible level according to any jokers
    // 2. jokers will always be best, as the most common card in the hand, repeated
    let best = hand
        . set
        . max_by(fn(c) -> if c == joker then -1 else hand . filter(==c) . len)
    
    if best == joker {
        best = ace // Edge case, 5 x 'J' should be 5 x 'A'
    }

    (
        hand . map(fn(x) -> if x == joker then best else x) . level, // For calculating the level, use the best replacement
        hand . map(fn(x) -> if x == joker then -1 else x), // Jokers must *order* as if they are the worst
        bid
    )
}) . score)
