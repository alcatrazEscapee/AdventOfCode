

fn a_star(starts, end, step_fn, heuristic_fn) {
    let queue = starts . map(fn(pos) -> (heuristic_fn pos, pos)) . heap
    let paths = dict()  // Mapping of node -> node along the cheapest path
    let costs = starts . map(fn(pos) -> (pos, 0)) . dict

    while queue {
        let _, curr = queue.pop
        let curr_cost = costs[curr]

        if end curr {
            return curr_cost
        }

        for adj, step_cost in step_fn curr {
            let adj_cost = curr_cost + step_cost

            if adj not in costs or adj_cost < costs[adj] {
                paths[adj] = curr
                costs[adj] = adj_cost
                queue.push((adj_cost + heuristic_fn adj, adj))
            }
        }
    }
    assert false : 'A* did not reach the target'
}

fn solve(min_straight, max_straight) -> a_star(
    [(0, 0, 0), (0, 0, 1)],
    fn((x, y, _)) -> x == width - 1 and y == height - 1,
    fn((x, y, d)) {
        let adj = []
        let dx, dy = DIRECTIONS[d]
        let cost = 0
        for n in range(1, 1 + max_straight) {
            let x0 = x + n * dx
            let y0 = y + n * dy
            if x0 < 0 or x0 >= width or y0 < 0 or y0 >= height {
                break
            }

            cost += grid[y0][x0]

            if n >= min_straight {
                adj.push(((x0, y0, (d + 1) % 4), cost))
                adj.push(((x0, y0, (d + 3) % 4), cost))
            }
        }
        adj
    },
    fn((x, y, _)) -> (width - x) + (height - y)
)


let grid = read_text './inputs/day17.txt'
    . split '\n'
    . map(map int)

let height = len grid, width = len(grid[0])

let DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]

print('Part 1:', solve(1, 3))
print('Part 2:', solve(4, 10))