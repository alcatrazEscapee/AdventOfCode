/**
 * An implementation of a bucket heap, which is a neat way to represent a priority queue,
 * which works for problems with few, discrete costs. (And in this case, our costs are integers
 * ranging from [0, ~1300])
 *
 * Using this over `heap()` results in ~10% speedup.
 */
struct BucketHeap(buckets, ptr) {
    fn new() -> BucketHeap(dict() . default list, max int)

    fn push(self, cost, e) {
        buckets[cost].push(e)
        ptr min= cost
    }

    fn pop(self) {
        let bucket = buckets[ptr]
        let e = bucket.pop

        while not bucket {
            ptr += 1
            bucket = buckets[ptr]
        }

        e
    }
}

/**
 * Find the min-cost path to the target, customized for this problem's movement rules.
 *
 * A* was used initially, but upon inspection it was taking more runtime calculating heuristics, than
 * it was saving by reducing the heap operations. This is likely due to a poor heuristic, plus the restrictions
 * on movement meaning it was not very useful.
 */
fn min_cost_path(min_straight, max_straight) {
    let costs = dict() . default(max int)
    let queue = BucketHeap->new()

    for dir in (1, 1i) {
        queue->push(0, (0, dir))
        costs[(0, dir)] = 0
    }

    while queue {
        let curr_cost = queue->ptr
        let curr = queue->pop()

        // Don't re-explore locations that we have already reached at a lower cost
        if curr_cost > costs[curr] {
            continue
        }

        // If we are at the end, return the first cost we reached it with
        let pos, dir = curr
        if pos == end {
            return curr_cost
        }

        // Otherwise compute adjacent positions by stepping according to the movement rules
        let adj_cost = curr_cost
        for n in range(1, 1 + max_straight) {
            pos += dir

            // If we reach a position outside the grid, abort, as we won't be able to explore any further from here
            if pos not in grid {
                break
            }

            adj_cost += grid[pos]

            if n >= min_straight {
                let left  = (pos, dir * 1i)
                  , right = (pos, dir * -1i)

                if adj_cost < costs[left] {
                    costs[left] = adj_cost
                    queue->push(adj_cost, left)
                }

                if adj_cost < costs[right] {
                    costs[right] = adj_cost
                    queue->push(adj_cost, right)
                }
            }
        }
    }
    assert false : 'min_cost_path() did not reach the target'
}

let grid = read_text './inputs/day17.txt'
    . split '\n'
    . enumerate
    . flat_map(fn((y, line)) -> line
        . enumerate
        . map(fn((x, c)) -> (x + y * 1i, int c)))
    . dict
let end = grid . keys . max

print('Part 1:', min_cost_path(1, 3))
print('Part 2:', min_cost_path(4, 10))
