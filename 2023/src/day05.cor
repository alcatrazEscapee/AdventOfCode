let seeds, *maps = read_text './inputs/day05.txt' . split '\n\n'

seeds = seeds[7:] . split ' ' . map int . set
maps .= map(fn(md) {
    let name, *entries = md . split '\n'
    entries . map(fn(e) -> e . split ' ' . map int)
})

fn apply(value) {
    for ranges in maps {
        for dest, src, rlen in ranges {
            if src <= value <= src + rlen {
                value += dest - src
                break
            }
        }
    }
    value
}

fn apply_range((start, size)) {
    // First, convert the slices from (start, size) into [start, end] tuples, both inclusive
    let slices = [(start, start + size - 1)]

    for ranges in maps {
        let new_slices = []
        while slices {
            let start, end = slices.pop

            for dest, src, rlen in ranges {
                let src_end = src + rlen - 1

                // Look for overlap with this slice:
                //     [src, src_end]
                // [start     ,      end]
                if !(end < src or src_end < start) {
                    if src > start {
                        // There will be some part of the slice at the front that doesn't get mapped by this range
                        // So, we need to re-queue it in our original slices array
                        slices.push((start, src - 1))
                    }

                    if end > src_end {
                        // There will be some part of the slice at the end that doesn't get mapped by this range
                        // Same as above, trim off the end and re-queue in our original slices array
                        slices.push((src_end + 1, end))
                    }

                    // Finally, there should be some overlapping intersection between the two
                    // Calculate this, adjust for src->dest mapping, and push it into the _new_ slices array
                    let overlap_start = max(src, start)
                    let overlap_end = min(src_end, end)

                    if overlap_end > overlap_start {
                        new_slices.push((overlap_start - src + dest, overlap_end - src + dest))
                    }

                    break
                }
            } else {
                // If we reach the end and haven't found any range that matches this slice, it doesn't get mapped
                new_slices.push((start, end))
            }
        }
        slices = new_slices
    }
    slices
}

print('Part 1:', seeds . map apply . min)
print('Part 2:', seeds . group_by 2 . flat_map apply_range . map([0]) . min)