let inp = read_text './inputs/day16.txt' . split '\n'
let height = len inp, width = len(inp[0])

fn at(c) {
    let x = real c, y = imag c
    if 0 <= x < width and 0 <= y < height then inp[y][x] else nil
}

let N = -1i, S = 1i, E = 1, W = -1
let CW = 1i, CCW = -1i

let MOVES = {
    (E, '/'): N, (N, '/'): E, (W, '/'): S, (S, '/'): W,
    (E, '\\'): S, (S, '\\'): E, (N, '\\'): W, (W, '\\'): N,
    (N, '.'): N, (E, '.'): E, (W, '.'): W, (S, '.'): S,
    (N, '|'): N, (E, '-'): E, (W, '-'): W, (S, '|'): S,

    (N, '-'): (E, W), (S, '-'): (E, W),
    (E, '|'): (N, S), (W, '|'): (N, S),
} . default nil

fn calculate_energy(*start) {
    let queue = [start]
    let seen = set() // Set of (position, direction) for all possible beam locations
    while queue {
        let pos, dir = queue.pop
        loop {
            pos += dir
            
            let c = at pos
            if c is nil {
                break // Beam is out of bounds
            }

            let key = (pos, dir)
            if key in seen {
                break  // Already reached this beam
            }

            seen.push(key)

            let move = MOVES[(dir, at pos)]
            if typeof move == vector {
                // Beam splits into multiple different vectors, so continue in one direction and push to the queue for the other
                queue.push((pos, move[1]))
                move = move[0]
            }

            dir = move
        }
    }
    seen . map([0]) . set . len
}

print('Part 1:', calculate_energy(W, E))

let part2 = 0

for i in range(width) {
    part2 max= calculate_energy(W + i * S, E)
    part2 max= calculate_energy(width + i * S, W)
}
for i in range(height) {
    part2 max= calculate_energy(N + i * E, S)
    part2 max= calculate_energy(height + i * E, N)
}

print('Part 2:', part2)