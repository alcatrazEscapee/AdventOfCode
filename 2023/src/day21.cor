let ADJ = (-1, 1, -1i, 1i)

let inp = read_text './inputs/day21.txt' . split '\n'

let start
let walls = inp
    . enumerate
    . flat_map(fn((y, line)) -> line
        . enumerate
        . filter(fn((x, c)) {
            if c == 'S' {
                start = x + y * 1i
            }
            c == '#'
        })
        . map(fn((x, _)) -> x + y * 1i)
    )
    . set

// Maintain a global state, consisting of a tuple:
// - A queue of the 'wavefront', aka newly added positions
// - A set of each of the points reachable via odd, and even parities, respectively. These get swapped every iteration
//
// The 'even' set always has the number of reachable points from the current number of steps
//
// N.B. This method of tracking state is *much* faster than recomputing the entire set each step, and 
// resulted in a runtime boost of ~25s -> ~0.5s
let queue = [start]
  , odd   = {}
  , even  = {start}


// Simulates `n` steps using the provided function `f` to check if a position is within the garden
// Returns the number of total positions at the given state
fn advance(f, n) {
    for _ in range(n) {
        let next = []
        for c in queue {
            for dc in ADJ {
                // Expand any new points into the set, and the next wavefront
                let pos = c + dc
                if f pos and pos not in odd {
                    next.push(pos)
                    odd.push(pos)
                }
            }
        }
        // At the end of each iteration, swap the even/odd sets, and update the wavefront
        queue = next
        even, odd = (odd, even)
    }
    len even
}

let part1 = advance((not in walls), 64)

print('Part 1:', part1)

// ===== Part 2 =====
//
// This relies on the fact that we can observe for this input/puzzle, the output is a quadratic equation
//
// Solve the quadratic equation describing len(seen) at f(x), f(x+n), f(x+2*n), etc.
// Since Cordy does not have floats, we need to use exact fractions, all over `d` as the common denominator
//
// f(x) = (a/d)x^2 + (b/d)x + (c/d)
//
// where a, b, c, d integers
//
// In addition, we have to do some _stupid_ arithmetic tricks to avoid overflowing the intermediate calculation
// So, for f(N), set N = u*d + v, where 0 < v < d, and u, v integers
//
// Then, calculate an alternate form that minimizes the intermediate calculation
fn in_garden(c) -> (c % n) not in walls

let N = 26501365
  , n = len inp
  , x0 = N % n
  , y0 = advance(in_garden, x0 - 64)
  , y1 = advance(in_garden, n)
  , y2 = advance(in_garden, n)
  , a = y2 - 2 * y1 + y0
  , d = 2 * n * n
  , b = 2 * n * (y1 - y0) - a * (2 * x0 + n)
  , c = y0 * d - a * x0 * x0 - b * x0
  , u = N / d
  , v = N % d
  , part2 = a * u * u * d + 2 * a * u * v + b * u + (a * v * v + b * v + c) / d

print('Part 2:', part2)
