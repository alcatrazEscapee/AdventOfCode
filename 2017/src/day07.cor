let weights = dict()
let tree = dict()

for line in read_text('./inputs/day07.txt') . split('\n') {
    let node, weight, *children = line
        . replace(' (', ', ')
        . replace(')', '')
        . replace(' -> ', ', ')
        . split(', ')
    
    weights[node] = int(weight)
    if children {
        tree[node] = children
    } 
}

let leafs = tree . values . concat . set
let root = tree . keys . filter(fn(k) -> k not in leafs) . head

print('Part 1:', root)

fn balance(node) {
    let weight = weights[node]
    if node in tree {
        let children = tree[node] . map(balance)
        if children . set . len > 1 {
            // This node is not balanced
            // Find the correct weight, assuming it is unambigious from just this node
            let correct = children . filter(fn(i) -> children.findn(i) > 1) . head
            for incorrect, child in zip(children, tree[node]) {
                if incorrect != correct {
                    print('Part 2:', weights[child] - incorrect + correct)
                    exit
                }
            }
        }
        weight += sum(children)
    }
    weight
}

balance(root)