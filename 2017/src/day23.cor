/*

00 | set b $1       | b = $1              | b = $1                      | b = $1
01 | set c b        | c = b               | c = $1                      | c = $1
02 | jnz a 2        | if a != 0: goto 04  |                             |
03 | jnz 1 5        | else: goto 08       | if part2 {                  | if part2 {
04 | mul b 100      | b *= 100            |     b = (b * 100) + 100000  |     b = (b * 100) + 100000
05 | sub b -100000  | b += 100000         |     c = b + 17000           |     c = b + 17000
06 | set c b        | c = b               | }                           | }
07 | sub c -17000   | c += 17000          |                             | loop {
08 | set f 1        | f = 1               | f = 1    <------------------+     f = 1
09 | set d 2        | d = 2               | d = 2                       |     d = 2
10 | set e 2        | e = 2               | e = 2    <---------------+  |     e = 2
11 | set g d        | g = d               |                   <---+  |  |     do {
12 | mul g e        | g * e               |                       |  |  |         do {
13 | sub g b        | g -= b              | if d * e == b {       |  |  |             if d * e == b {
14 | jnz g 2        | if g != 0: goto 16  |     f = 0             |  |  |                 f = 0
15 | set f 0        | f = 0               | }                     |  |  |             }
16 | sub e -1       | e++                 | e++                   |  |  |             e++
17 | set g e        | g = e               |                       |  |  |
18 | sub g b        | g -= b              |                       |  |  |
19 | jnz g -8       | if g != 0: goto 11  | } while (e != b)    --+  |  |        } while (e != b)
20 | sub d -1       | d++                 | d++                      |  |        d++
21 | set g d        | g = d               |                          |  |
22 | sub g b        | g -= b              |                          |  |
23 | jnz g -13      | if g != 0: goto 10  | } while (d != b) --------+  |    } while (d != b)
24 | jnz f 2        | if f != 0: goto 26  | if f == 0 {                 |    if f == 0 {
25 | sub h -1       | h++                 |     h++                     |        h++
26 | set g b        | g = b               | }                           |    }
27 | sub g c        | g -= c              |                             |
28 | jnz g 2        | if g != 0: goto 30  | if b != c {                 |     if b == c { break }
29 | jnz 1 3        | else: exit          |     b += 17                 |     b += 17
30 | sub b -17      | b += 17             |     continue    ------------+ }
31 | jnz 1 -23      | goto 08             | }


Part 1:

- Bootstrap code is skipped, so b = c = $1
- The main loop only enters once, as the break condition b == c is always true
- There are two `mul` instructions - one in the boostrap (which is skipped), and one in the main loop

This reduces to:

```
for (d = 2; d != b; d++) {
    for (e = 2; e != b; e++) {
        mul
```

... which invokes `mul` (b - 2) ** 2 times

Part 2:

- Bootstrap code is ran, so the new values of b, c are calculated
- The inner loop sets `f = 0` only when two unique values >= 2 are found who's product is the current value of `b`
- `h` is incremented only when `f = 0`

This reduces to:

```
loop {
    if b.is_prime {
        h += 1
    }
    if b == c { break }
    b += 17
}
```

which we can optimize by using a fast implementation if `is_prime`
*/

let b = read_text('./inputs/day23.txt')
     . split('\n')
     . [0]
     . split(' ')
     . [2]
     . int

print('Part 1:', (b - 2) ** 2)

b = (b * 100) + 100000

fn is_prime(n) -> range(2, 1 + sqrt(n)) . any(fn(p) -> n % p == 0)

let h = 0, c = b + 17000
loop {
    if b.is_prime {
        h += 1
    }
    if b == c { break }
    b += 17
}

print('Part 2:', h)
